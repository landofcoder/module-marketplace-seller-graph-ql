# Landofcoder
#
# NOTICE OF LICENSE
#
# This source file is subject to the Landofcoder.com license that is
# available through the world-wide-web at this URL:
# https://landofcoder.com/LICENSE.txt
#
# DISCLAIMER
#
# Do not edit or add to this file if you wish to upgrade this extension to newer
# version in the future.
#
# @category    Landofcoder
# @package     Lof_SellerGraphQl
# @copyright   Copyright (c) 2022 Landofcoder (https://landofcoder.com/)
# @license     https://landofcoder.com/LICENSE.txt

enum UrlRewriteEntityTypeEnum {
    LOF_MARKETPLACE
}

type Query {
    seller(
        sellerUrl: String! @doc(description: "Seller Url Key")
    ): Seller @resolver(class: "\\Lof\\SellerGraphQl\\Model\\Resolver\\SellerById") @doc(description: "Get Seller by Url Key") @cache( cacheIdentity: "Lof\\SellerGraphQl\\Model\\Resolver\\SellerById\\Identity")

    sellers(
       filter: SellerFilterInput @doc(description: "Identifies which question attributes to search for and return."),
       pageSize: Int = 5 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
       currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
       sort: SellerSortInput @doc(description: "Specifies which attributes to sort on, and whether to return the results in ascending or descending order.")
   ):Sellers @resolver(class: "\\Lof\\SellerGraphQl\\Model\\Resolver\\Sellers") @doc(description: "The seller query searches for sellers that match the criteria specified in the search and filter attributes") @cache( cacheIdentity: "Lof\\SellerGraphQl\\Model\\Resolver\\Sellers\\Identity")

   sellerCollection(
       filter: SellerGroupFilterInput @doc(description: "Identifies which question attributes to search for and return."),
       pageSize: Int = 5 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
       currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
       sort: SellerGroupSortInput @doc(description: "Specifies which attributes to sort on, and whether to return the results in ascending or descending order.")
   ):SellerGroups @resolver(class: "\\Lof\\SellerGraphQl\\Model\\Resolver\\SellerGroups") @doc(description: "The seller query searches for sellers that match the criteria specified in the search and filter attributes") @cache( cacheIdentity: "Lof\\SellerGraphQl\\Model\\Resolver\\SellerGroups\\Identity")
}

type Mutation {

    registerSeller(input: SellerMutationInput!): MarketplaceOuput @resolver(class: "\\Lof\\SellerGraphQl\\Model\\Resolver\\CreateSeller") @doc(description: "Register a new Seller Account, create new seller account")

    becomeSeller (
        input: SellerInput @doc(description: "Query by BecomeSellerMutationInput.")
    ) : MarketplaceOuput @resolver( class: "Lof\\SellerGraphQl\\Model\\Resolver\\BecomeSeller") @doc(description: "Query by Mutation Become Seller.")

    sellerUpdateProfile (
        input: SellerProfileMutationInput @doc(description: "Query by SellerProfileMutationInput.")
    ) : SellerOuput @resolver( class: "Lof\\SellerGraphQl\\Model\\Resolver\\SellerUpdateProfile") @doc(description: "Query by Mutation Seller submit change his profile.")
}

type Customer {
    seller: Seller @resolver( class: "Lof\\SellerGraphQl\\Model\\Resolver\\Seller") @doc(description: "Query seller profile of current logged in customer account.")
}

type Seller {
    seller_id: Int @doc(description: "Seller ID")
    contact_number: String @doc(description: "Phone Number")
    shop_title: String @doc(description: "Shop Title")
    company_locality: String @doc(description: "Company Locality")
    company_description: String @doc(description: "Company Description")
    return_policy: String @doc(description: "Return Policy")
    shipping_policy: String @doc(description: "Shipping Policy")
    address: String @doc(description: "Address")
    country: String @doc(description: "Country")
    country_id: CountryCodeEnum @doc(description: "Deprecated: use `country_code` instead.")
    image: String @doc(description: "Image")
    thumbnail: String @doc(description: "Thumbnail")
    city: String @doc(description: "City")
    region: String @doc(description: "Region")
    group: String @doc(description: "Group")
    url: String @doc(description: "Shop Url")
    name: String @doc(description: "Name")
    sale: String @doc(description: "Sale")
    page_layout: String @doc(description: "Page Layout")
    status: Int @doc(description: "Status")
    position: Int @doc(description: "Position")
    twitter_id: String @doc(description: "Twitter Id")
    facebook_id: String @doc(description: "Facebook Id")
    gplus_id: String @doc(description: "Gplus Id")
    youtube_id: String @doc(description: "Youtube Id")
    vimeo_id: String @doc(description: "Vimeo Id")
    instagram_id: String @doc(description: "Instagram Id")
    pinterest_id: String @doc(description: "Pinterest Id")
    linkedin_id: String @doc(description: "Linkedin Id")
    tw_active: Int @doc(description: "Tw Active")
    fb_active: Int @doc(description: "Fb Active")
    gplus_active: Int @doc(description: "Gplus Active")
    vimeo_active: Int @doc(description: "Vimeo Active")
    instagram_active: Int @doc(description: "Instagram Active")
    pinterest_active: Int @doc(description: "Pinterest Active")
    linkedin_active: Int @doc(description: "Linkedin Active")
    banner_pic: String @doc(description: "Banner Pic")
    shop_url: String @doc(description: "Shop Url")
    url_key: String @doc(description: "Shop url_key")
    logo_pic: String @doc(description: "Logo Pic")
    verify_status: Int @doc(description: "verify_status")
    product_count: Int @doc(description: "product_count")
    telephone: String @doc(description: "telephone")
    creation_time: String @doc(description: "creation_time")
    update_time: String @doc(description: "update_time")
    country_id: String @doc(description: "country_id")
    total_sold: String @doc(description: "total_sold")
    store_id: [Int] @doc(description: "Store Id")
    seller_rates: SellerRates @doc(description: "Seller Rates")
    products: Products @doc(description: "Products")
}

type Sellers {
    total_count: Int @doc(description: "The number of sellers returned")
    items: [Seller] @doc(description: "An array of sellers that match the specified search criteria")
    page_info: SearchResultPageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query.")
    sort_fields: SortFields @doc(description: "An object that includes the default sort field and all available sort fields.") @resolver(class: "Lof\\SellerGraphQl\\Model\\Resolver\\Sellers\\SortFields")
}

input SellerSortInput @doc(description: "SellerSortInput specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. It's possible to sort sellers using searchable attributes with enabled 'Use in Filter Options' option")
{
    position: SortEnum @doc(description: "Sort by the position (position).")
    creation_time: SortEnum @doc(description: "Sort by the creation_time assigned to each seller.")
    update_time: SortEnum @doc(description: "Sort by the update_time assigned to each seller.")
    total_sold: SortEnum @doc(description: "Sort by the total_sold assigned to each seller.")
    product_count: SortEnum @doc(description: "Sort by the product_count assigned to each seller.")
    name: SortEnum @doc(description: "Sort by the name assigned to each seller.")
    shop_title: SortEnum @doc(description: "Sort by the shop_title assigned to each seller.")
    sale: SortEnum @doc(description: "Sort by the sale assigned to each seller.")
    country_id: SortEnum @doc(description: "Sort by the country_id assigned to each seller.")
    region: SortEnum @doc(description: "Sort by the region assigned to each seller.")
    status: SortEnum @doc(description: "Sort by the status assigned to each seller.")
}

input SellerGroupSortInput @doc(description: "SellerGroupSortInput specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. It's possible to sort sellers using searchable attributes with enabled 'Use in Filter Options' option")
{
    position: SortEnum @doc(description: "Sort by the position (position).")
    name: SortEnum @doc(description: "Sort by the name assigned to each seller.")
    group_id: SortEnum @doc(description: "Sort by the group_id assigned to each seller.")
    shown_in_sidebar: SortEnum @doc(description: "Sort by the shown_in_sidebar assigned to each seller.")
    status: SortEnum @doc(description: "Sort by the status assigned to each seller.")
}

input SellerFilterInput {
    seller_id: FilterTypeInput @doc(description: "Seller ID")
    name: FilterTypeInput @doc(description: "Name")
    status: FilterTypeInput @doc(description: "Status")
    email: FilterTypeInput @doc(description: "Email")
    group_id: FilterTypeInput @doc(description: "group_id")
    page_title: FilterTypeInput @doc(description: "page_title")
    meta_keywords: FilterTypeInput @doc(description: "meta_keywords")
    created_at: FilterMatchTypeInput @doc(description: "created_at")
    address: FilterMatchTypeInput @doc(description: "address")
    country: FilterTypeInput @doc(description: "country")
    city: FilterTypeInput @doc(description: "city")
    region: FilterTypeInput @doc(description: "region")
    or: SellerFilterInput @doc(description: "The keyword required to perform a logical OR comparison")
}

input SellerGroupFilterInput {
    group_id: FilterTypeInput @doc(description: "Seller Group ID")
    name: FilterTypeInput @doc(description: "Name")
    status: FilterTypeInput @doc(description: "Status")
    url_key: FilterTypeInput @doc(description: "Url_key")
    position: FilterTypeInput @doc(description: "position")
    show_in_sidebar: FilterTypeInput @doc(description: "show_in_sidebar")
    or: SellerGroupFilterInput @doc(description: "The keyword required to perform a logical OR comparison")
}

type SellerGroup {
    group_id: Int @doc(description: "Group Id")
    name: String @doc(description: "name")
    url_key: String @doc(description: "url_key")
    status: Int @doc(description: "Status")
    position: Int @doc(description: "position")
    can_add_product: Int @doc(description: "can_add_product")
    can_use_message: Int @doc(description: "can_use_message")
    can_use_vacation: Int @doc(description: "can_use_vacation")
    can_use_withdrawal: Int @doc(description: "can_use_withdrawal")
}

type SellerGroups {
    total_count: Int @doc(description: "The number of sellers returned")
    items: [SellerGroup] @doc(description: "An array of sellers that match the specified search criteria")
    page_info: SearchResultPageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query.")
    sort_fields: SortFields @doc(description: "An object that includes the default sort field and all available sort fields.") @resolver(class: "Lof\\SellerGraphQl\\Model\\Resolver\\Sellers\\SortFields")
}

type MarketplaceOuput {
    code: String @doc(description: "The response code")
    message: String @doc(description: "The response message")
}

input SellerMutationInput {
    seller: SellerInput! @doc(description: "Seller Input data")
    customer: CustomerDataInput! @doc(description: "Seller Input data")
    password: String!
}

input SellerInput {
    group_id  : String @doc(description: "An group_id")
    url_key  : String! @doc(description: "An seller url key.")
}

input CustomerDataInput {
    prefix: String @doc(description: "An honorific, such as Dr., Mr., or Mrs.")
    firstname: String! @doc(description: "The customer's first name")
    middlename: String @doc(description: "The customer's middle name")
    lastname: String! @doc(description: "The customer's family name")
    suffix: String @doc(description: "A value such as Sr., Jr., or III")
    email: String! @doc(description: "The customer's email address. Required for customer creation")
    dob: String @doc(description: "Deprecated: Use `date_of_birth` instead")
    date_of_birth: String @doc(description: "The customer's date of birth")
    taxvat: String @doc(description: "The customer's Tax/VAT number (for corporate customers)")
    gender: Int @doc(description: "The customer's gender (Male - 1, Female - 2)")
    is_subscribed: Boolean @doc(description: "Indicates whether the customer is subscribed to the company's newsletter")
    address: AddressInput @doc(description: "The customer's AddressInput")
}

input AddressInput {
    region_id: String @doc(description: "The address's region_id")
    country_id: CountryCodeEnum! @doc(description: "Deprecated: use `country_code` instead.")
    city: String @doc(description: "The city or town")
    street: [String] @doc(description: "An array of strings that define the street number and name")
    company: String @doc(description: "The customer's company")
    telephone: String @doc(description: "The telephone number")
    postcode: String @doc(description: "The customer's ZIP or postal code")
    fax: String @doc(description: "The fax number")
    vat_id: String @doc(description: "The customer's Tax/VAT number (for corporate customers)")
    custom_attributes: [CustomerAddressAttributeInput] @doc(description: "Deprecated: Custom attributes should not be put into container.")
}
